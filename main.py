import asyncio
import argparse
import matplotlib.pyplot as plt
from core.parser import TelegramParser
from core.database import DatabaseManager
from utils.logger import setup_logger

logger = setup_logger(__name__)

def plot_daily_posts(daily_counts):
    dates = [row[0] for row in daily_counts]
    counts = [row[1] for row in daily_counts]

    plt.figure(figsize=(10, 5))
    plt.plot(dates, counts, marker='o')
    plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤ –¥–µ–Ω—å')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('daily_posts.png')

async def main(channels: list):
    db = DatabaseManager()
    parser = TelegramParser()
    
    for channel in channels:
        async for post in parser.parse_channel(channel):
            db.save_post(post)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å—Ç {post['id']} –∏–∑ {channel}")

    stats = db.get_stats_by_university()
    daily_counts = db.get_daily_post_counts()

    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞–º:")
    for row in stats:
        university, total_posts, unique_users, views, forwards, replies = row
        print(f"\nüè´ {university}:")
        print(f"‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏–π: {total_posts}")
        print(f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}")
        print(f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views or 0}")
        print(f"‚Ä¢ –†–µ–ø–æ—Å—Ç–æ–≤: {forwards or 0}")
        print(f"‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {replies or 0}")

    plot_daily_posts(daily_counts)
    print("\nüìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ñ–∞–π–ª: daily_posts.png")

    db.close()

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('channels', nargs='+', help='Telegram –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
    args = parser.parse_args()
    
    asyncio.run(main(args.channels))
